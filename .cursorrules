{
  "projectName": "SwiftUIComponents",
  "allowMissingCursorImport": true,
  "completionTimeout": 30000,
  "codebase": {
    "includePatterns": ["**/*.swift", "**/*.xib", "**/*.storyboard", "context/**/*.md", ".gitignore"],
    "excludePatterns": ["**/.build/**", "**/Pods/**", "**/Carthage/**", "**/DerivedData/**"]
  },
  "aiSettings": {
    "temperature": 0.2,
    "model": "claude-3-sonnet-20240229"
  },
  "formatting": {
    "swift": {
      "indentWidth": 4,
      "tabWidth": 4,
      "useTabs": false,
      "lineLength": 100
    }
  },
  "customCommands": {
    "buildSwiftUIComponents": {
      "command": "xcodebuild clean build -scheme SwiftUIComponents -destination 'platform=iOS Simulator,name=iPhone 16 Pro' -quiet | grep -E \"error:\" | head -n 10",
      "description": "Build SwiftUIComponents project with iPhone 16 Pro simulator and show first 10 errors"
    },
    "buildVerbose": {
      "command": "xcodebuild clean build -scheme SwiftUIComponents -destination 'platform=iOS Simulator,name=iPhone 16 Pro'",
      "description": "Build SwiftUIComponents project with iPhone 16 Pro simulator with full output"
    },
    "buildWarnings": {
      "command": "xcodebuild clean build -scheme SwiftUIComponents -destination 'platform=iOS Simulator,name=iPhone 16 Pro' -quiet | grep -E \"warning:|error:\" | head -n 20",
      "description": "Build SwiftUIComponents project with iPhone 16 Pro simulator and show errors and warnings"
    },
    "listSchemes": {
      "command": "xcodebuild -list",
      "description": "List all available targets and schemes in the project"
    },
    "updateContext": {
      "command": "open context/context.md",
      "description": "Open the main context file for updating session information"
    },
    "updateTechStack": {
      "command": "open context/TechStack.md",
      "description": "Open the tech stack documentation"
    },
    "updateDesignDoc": {
      "command": "open context/TDD.md",
      "description": "Open the technical design document"
    },
    "updateTaskList": {
      "command": "open context/TaskList.md",
      "description": "Open the task list for component implementation tracking"
    },
    "updateComponentRoadmap": {
      "command": "open context/ComponentRoadmap.md",
      "description": "Open the component roadmap for planning"
    },
    "updateShowcaseDesign": {
      "command": "open context/ComponentShowcaseDesign.md",
      "description": "Open the showcase design guidelines"
    },
    "updateGitignore": {
      "command": "open .gitignore",
      "description": "Open the .gitignore file for updating"
    },
    "runApp": {
      "command": "xcrun simctl launch booted com.yourcompany.SwiftUIComponents",
      "description": "Run the built app in the simulator"
    },
    "listSimulators": {
      "command": "xcrun simctl list devices | grep -E \"iPhone|iPad\" | grep \"Booted\"",
      "description": "List available booted simulators"
    },
    "generateCommitMessage": {
      "command": "echo 'Git commit message generated based on recent changes:'",
      "description": "Generate a git commit message summarizing the changes made"
    }
  },
  "snippets": {
    "codeexample": {
      "prefix": "ce",
      "body": "CodeExample(\n    title: \"${1:Example Title}\",\n    description: \"${2:Description of what this example demonstrates}\",\n    category: .${3:basic},\n    code: #\"\"\"\nimport SwiftUI\n\n${4:// Your SwiftUI code here}\n\"\"\"\n    preview: {\n        AnyView(\n            ${5:// Preview implementation}\n        )\n    }\n)",
      "description": "Create a new CodeExample with proper structure"
    },
    "viewmodel": {
      "prefix": "vm",
      "body": "@MainActor\nfinal class ${1:Component}ViewModel: ObservableObject {\n    @Published private(set) var state: State\n    \n    func handleAction(_ action: Action) async throws {\n        // Handle action\n    }\n}",
      "description": "Create a standard ViewModel with MVVM pattern"
    },
    "swiftuiview": {
      "prefix": "suiv",
      "body": "struct ${1:Component}View: View {\n    @StateObject private var viewModel: ${1:Component}ViewModel\n    \n    var body: some View {\n        // UI implementation\n    }\n}\n\n#Preview {\n    ${1:Component}View()\n}",
      "description": "Create a standard SwiftUI view with preview"
    },
    "asynctask": {
      "prefix": "task",
      "body": "Task { [weak self] in\n    await self?.${1:performAction}()\n}",
      "description": "Create async task with weak self"
    },
    "nativecomponent": {
      "prefix": "nc",
      "body": "public struct ${1:ComponentName}Showcase: SwiftUIComponent {\n    public let configuration: ${1:ComponentName}Configuration\n    \n    public var body: some View {\n        VStack(spacing: 20) {\n            ${2:// Component implementation}\n        }\n        .padding()\n        .navigationTitle(configuration.displayName)\n    }\n    \n    public init(configuration: ${1:ComponentName}Configuration) {\n        self.configuration = configuration\n    }\n    \n    public init() {\n        self.configuration = ${1:ComponentName}Configuration()\n    }\n}",
      "description": "Create a new native component showcase"
    }
  },
  "rules": [
    {
      "name": "Always Reference Context Files",
      "description": "AI should always reference context files when providing assistance",
      "trigger": "ai-request",
      "action": "notification",
      "message": "üß† Reference context files: context.md, TaskList.md, ComponentRoadmap.md, ComponentShowcaseDesign.md, TDD.md for project context",
      "commands": []
    },
    {
      "name": "Code Examples Priority",
      "description": "Focus on expanding code examples for production readiness",
      "trigger": "ai-request",
      "action": "notification", 
      "message": "üöÄ PRIORITY: Continue expanding CodeExamplesProvider with more comprehensive examples. Use proper #\"\"\" raw string escaping and AnyView previews.",
      "commands": ["updateContext"]
    },
    {
      "name": "Native Components Only",
      "description": "Ensure only native iOS components are implemented",
      "trigger": "file-changed",
      "pattern": "**/*Showcase.swift",
      "action": "notification",
      "message": "‚úÖ NATIVE ONLY: Ensure this component uses only native iOS/SwiftUI APIs - no custom implementations",
      "commands": []
    },
    {
      "name": "Update Context After Major Changes",
      "description": "Update context files after significant development sessions",
      "trigger": "file-changed",
      "pattern": "**/*.swift",
      "minChanges": 15,
      "action": "notification",
      "message": "üìù Consider updating context/context.md with new patterns or decisions from this session",
      "commands": ["updateContext"]
    },
    {
      "name": "Code Examples Quality Check",
      "description": "Ensure code examples meet production standards",
      "trigger": "file-changed",
      "pattern": "**/ContentView.swift",
      "action": "notification",
      "message": "üîç Code Examples Quality: Ensure proper #\"\"\" escaping, AnyView previews, copy-paste ready code, and interactive demonstrations",
      "commands": []
    },
    {
      "name": "Build Check Before Major Changes",
      "description": "Build the project to check for errors before major changes",
      "trigger": "pre-commit",
      "pattern": "**/*.swift",
      "action": "notification",
      "message": "üî® Running build check to ensure code compiles without errors",
      "commands": ["buildSwiftUIComponents"]
    },
    {
      "name": "Component Showcase Design Compliance",
      "description": "Ensure component showcases follow design guidelines",
      "trigger": "file-created",
      "pattern": "**/*Showcase.swift",
      "action": "notification",
      "message": "üé® New component showcase created. Ensure compliance with ComponentShowcaseDesign.md guidelines: Native First, Interactive Examples, Clean Layout",
      "commands": ["updateShowcaseDesign"]
    },
    {
      "name": "MapKit Issue Priority",
      "description": "Address MapKit yellow grid issue when working on MapKit components",
      "trigger": "file-changed",
      "pattern": "**/MapKitShowcase.swift",
      "action": "notification",
      "message": "üó∫Ô∏è MapKit Issue: Fix yellow grid display - likely needs proper region setup and location permissions handling",
      "commands": []
    },
    {
      "name": "Production Readiness Check",
      "description": "Ensure production-ready quality for all implementations",
      "trigger": "file-changed",
      "pattern": "**/*.swift",
      "minChanges": 10,
      "action": "notification",
      "message": "üöÄ Production Check: Ensure error handling, accessibility, proper Swift patterns, and comprehensive documentation",
      "commands": ["buildWarnings"]
    },
    {
      "name": "Individual Component Download Preparation",
      "description": "Keep in mind future individual component download capability",
      "trigger": "file-changed",
      "pattern": "**/CodeExamplesProvider*",
      "action": "notification",
      "message": "üíæ Future Feature: Structure code examples for individual component download capability - keep examples modular and self-contained",
      "commands": []
    }
  ],
  "projectStatus": {
    "phase": "Production-Ready Code Examples Expansion",
    "completion": "100% Native Components + Active Code Examples Implementation",
    "priorities": [
      "Expand CodeExamplesProvider with more comprehensive examples",
      "Fix MapKit yellow grid display issue", 
      "Continue adding interactive code examples for high-impact components",
      "Maintain production-ready quality standards",
      "Prepare architecture for individual component downloads"
    ],
    "achievements": [
      "‚úÖ 49/49 Native iOS Components implemented",
      "‚úÖ Production-ready code examples system with live previews",
      "‚úÖ Fixed Alert and ActionSheet 'Preview coming soon' issues", 
      "‚úÖ Consistent UI with white backgrounds and borders",
      "‚úÖ Conditional code examples display (better UX)",
      "‚úÖ Interactive code examples with copy-to-clipboard",
      "‚úÖ Proper Swift string escaping with #\"\"\" raw strings"
    ]
  }
} 